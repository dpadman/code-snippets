#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class Permatchd2 {
public:
	struct st {
		int cnt;
		set <int> v;
	};
	int fix(vector <string> g) {
		int N = g.size();
		int tot = 0;
		vector <struct st> comp;
		
		for (int i=0; i<N; i++) {
		
			for (int j=i+1; j<N; j++) {
			
				bool added = false, one = false;
				int pos = 0;
				
				if (g[i][j] == 'N') continue;
				
				for (int k=0; k<comp.size(); k++) {
				
						if (comp[k].v.find(i) != comp[k].v.end() || comp[k].v.find(j) != comp[k].v.end()) {
							if (!one) {
								comp[k].cnt++;
								comp[k].v.insert(i);
								comp[k].v.insert(j);
							
								one = true;
								pos = k;
								added = true;
								tot++;
							} else {
								struct st os = comp[pos];
								comp[k].cnt += os.cnt;
								comp[k].v.insert(os.v.begin(), os.v.end());
							}
						}
				}
				if (!added) {
					struct st s;
					s.cnt = 1;
					s.v.insert(i);
					s.v.insert(j);
					comp.push_back(s);
					tot++;
				}
			}
		}

		int maxE = ( N * (N-1))/2;
		if (tot == maxE && tot%2 == 1) return -1;
		int res = 0;
		//cout << "max=" << maxE<< endl;
		for (int i=0; i<comp.size(); i++) {
			//cout << "ans= " << comp[i].cnt << " ";
			/*for (auto j=comp[i].v.begin(); j!=comp[i].v.end(); ++j) {
				cout << *j << " ";
			}*/
			
			if (res + tot == maxE) return -1;
			if (comp[i].cnt % 2 == 1) res++;
			//cout << endl;
		}
		return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	Permatchd2 *obj;
	int answer;
	obj = new Permatchd2();
	clock_t startTime = clock();
	answer = obj->fix(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"NYN","YNN","NNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"NYY","YNN","YNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"NYY","YNY","YYN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"NYYY","YNYY","YYNN","YYNN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"NYNNNN","YNNNNN","NNNYNN","NNYNNN","NNNNNY","NNNNYN"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	string t0[] = {"N"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
