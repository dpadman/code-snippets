#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class DoubleWeights {
public:
	struct QElem {
		int i;
		int w1, w2;
		vector <int> sk;
	};
	int minimalCost(vector <string> weight1, vector <string> weight2) {
		int res = 1<<30;
		queue< QElem > Q;

		int i=0, j=0;
		for (int i=0; i<weight1[0].size(); i++) {
			if (weight1[0][i] != '.') {
				QElem elem;
				elem.i = i;
				elem.w1 = weight1[0][i]-48;
				elem.w2 = weight2[0][i]-48;
				if (i == 1)
					res = (elem.w1 * elem.w2 < res) ? elem.w1 * elem.w2 : res;
				elem.sk.push_back(0);
				Q.push(elem);
			}
		}
		
		while(!Q.empty()) {
			QElem elem = Q.front();
			for (int j=0; j<weight1[elem.i].size(); j++) {
				if (weight1[elem.i][j] != '.') {
					int node = weight1[elem.i][j]-48;
					bool found = false;
					for (int i=0;i<elem.sk.size();i++) {
						if (node == elem.sk[i]) found = true;
					}
					if (!found) {

					}
				}
			}
			Q.pop();
		}
		return -1;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	DoubleWeights *obj;
	int answer;
	obj = new DoubleWeights();
	clock_t startTime = clock();
	answer = obj->minimalCost(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	vector <string> p1;
	int p2;
	
	{
	// ----- test 0 -----
	string t0[] = {"..14","..94","19..","44.."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"..94","..14","91..","44.."};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 64;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"..14","..14","11..","44.."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"..94","..94","99..","44.."};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 36;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"..",".."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {"..",".."};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = -1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {".....9","..9...",".9.9..","..9.9.","...9.9","9...9."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {".....9","..9...",".9.9..","..9.9.","...9.9","9...9."};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 2025;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {".4...1","4.1...",".1.1..","..1.1.","...1.1","1...1."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	string t1[] = {".4...1","4.1...",".1.1..","..1.1.","...1.1","1...1."};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 16;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
